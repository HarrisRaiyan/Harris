cluster is called 1 master node and the worker node of the master node.
node is called machine 
pods is like working container which we can run the multiple container in single pod 

there is 3 methods of the kubrnetes to run the pods

1) Kops- this method is used widely , needs of the kops is cleint machine like (our own laptop can configure and using the EC2 we can configure)
   1.it has 2 nodes compulsory master node and worker node for worker node we can use the mutliple for one cluster only one master node to control the worker node.
   2.the minimum CPU for master node is 2vCPU and ram 2GB (t3 small) 
   3. the minimum CPU for worker node is 2vCPU and ram 2GB (t3 Small) depending on the application we have to choose the configuration 
   4. to install the kops awscli for taking access for the aws console command is apt install awscli
   4. then kubectl this command is used for control the nodes to install the command is apt install kubectl
   5. then kops for this 
     curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
      chmod +x kops
       sudo mv kops /usr/local/bin/kops

for minikube installations directly can use the steps given in official website.
for checking the node the command is kubectl get node
for detail information of node command is kubectl get node -o wide


to check the running pods in client machine (kubectl get pod) it shows only defult namespace pods only
first create a pod.yaml file with required pods 
then for creating the pod command is (kubectl apply -f pod.yaml)
kubectl describe pod (podname) to show full details of pod
kubectl get namespace this command while shop the namespace in cluster.
when we not mention the namespace in pod.yaml file this will create in defult namespace there are 4 namespaces
defult
kube-node-lease
kube-public
kube-system
for checking which are the pods are running in which namespace the command is (kubectl get pod -n (name of the namespace)

Network CNI (cluster Network Interface)
from the public accessing the pod using the public the port number
for nodeport 30000-32767
in .yaml have to nodeport is 30000
container port : 80
target port (this means pod port) : target pod and the container have to be same
port ( this means cluster port ) : 8080
 the flow of the reaching to application is user have to hit the nodeport 
then it will go cluster and pod and the container then the user can access the application


for creating a namespace command is (kubectl create ns (name))

in kube-system the every master pods are running like api scheduler controller manager and etcd this everything is created as dedult under namespace kube-system.

when we create a cluster in aws using kops for installation kops we can get in offical page cammond and there will be two nodes(nodes means one system or server) first  node is master node that have the control of every work node and master node is having the pods under which api ,scheduler ,controller manager and etcd.
every pod is created in work node
kubectl delete pod (name of the pod)
to check the details of replicaset command is (kubectl get replicaset)
to check the namespace of the pod with full details vommand is ( kubectl get pod -n (namespace) -o wide 
for same describe (kubectl describe pod -n (namespace) (podname))
to check running daemonset command is(kubectl  get deamonset -n (namespace))

to delete the deployment command is (kubectl delete -n (namespace) --all or can mention the name of the deployment
to delete the replicaset this is the same for both replicaset and daemonset
to delete the namespace command is ( kubectl delete ns (name))
for checking the service of the pod (kubectl get svc)
for login into the pod command (kubectl exec -it podname /bin/bash)
without login to pod directly run the command from the node the command is (kubectl exec -it podname printenv)


config 
apiVersion: apps/v1
kind: ConfigMap
metadata:
  name: MySQL
data:
  username:"dev-admin"
  pass: "devpassword123"
  port : 3306


the configMap is used to store the data in data what are the data it's saved under the data it can be used at depoloyment
eample for conecting the db everytime entering the details for every server is take time so the ConfigMap is can use the for fast and multiple time

for creating the configmap is same as pod like (kubectl -f apply config.yaml)
for seeing configmap is running or not the command is (kubectl  get ConfigMap)


